{"version":3,"sources":["Components/Navigation.js","Components/Summary.js","Components/Profile.js","Components/ProjectCard.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Navigation","Navbar","bg","expand","fixed","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","as","to","Summary","Jumbotron","Profile","Container","fluid","Row","Col","ProjectCard","projectData","useState","sort","a","b","reduce","rows","key","index","push","length","dataState","map","rData","rIdx","data","i","Card","style","width","Img","height","variant","src","thumbnail","Body","Title","title","Text","summary","App","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"unDAkBeA,MAff,WACE,OACE,eAACC,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,KAAKC,MAAM,MAArC,UACE,cAACH,EAAA,EAAOI,MAAR,CAAcC,KAAK,IAAnB,+BACA,cAACL,EAAA,EAAOM,OAAR,CAAeC,gBAAc,qBAC7B,cAACP,EAAA,EAAOQ,SAAR,CAAiBC,GAAG,mBAApB,SACE,eAACC,EAAA,EAAD,CAAKC,UAAU,UAAf,UACE,cAACD,EAAA,EAAIE,KAAL,CAAUC,GAAID,IAAME,GAAG,WAAvB,qBACA,cAACJ,EAAA,EAAIE,KAAL,CAAUC,GAAID,IAAME,GAAG,WAAvB,8B,QCCKC,MAVf,WACE,OACE,cAACC,EAAA,EAAD,CAAWL,UAAU,4BAArB,SACE,qBAAKF,GAAG,UAAUE,UAAU,4BAA5B,SACE,kF,wBCmFOM,MAvFf,WACE,OACE,cAACD,EAAA,EAAD,CAAWP,GAAG,UAAUE,UAAU,UAAlC,SACE,cAACO,EAAA,EAAD,CAAWC,OAAK,EAACR,UAAU,mBAA3B,SACE,eAACS,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,CAAKV,UAAU,eAAf,UACE,sBAAKA,UAAU,eAAf,UACE,yCACA,kIACoB,uBADpB,gKAEkC,uBAFlC,oNAIS,uBAJT,qIAQF,sBAAKA,UAAU,eAAf,UACE,wCACA,uCACE,sBAAMA,UAAU,aAAhB,kBACA,sBAAMA,UAAU,aAAhB,oBACA,sBAAMA,UAAU,aAAhB,wBACA,sBAAMA,UAAU,aAAhB,mBACA,sBAAMA,UAAU,aAAhB,oBACA,sBAAMA,UAAU,aAAhB,8BAGJ,sBAAKA,UAAU,eAAf,UACE,uCACA,uCACE,sBAAMA,UAAU,aAAhB,qBACA,sBAAMA,UAAU,aAAhB,qBACA,sBAAMA,UAAU,aAAhB,kBACA,sBAAMA,UAAU,aAAhB,qBACA,sBAAMA,UAAU,aAAhB,mBACA,sBAAMA,UAAU,aAAhB,iBACA,sBAAMA,UAAU,aAAhB,0BAIN,eAACU,EAAA,EAAD,CAAKV,UAAU,iBAAf,UACE,sBAAKA,UAAU,eAAf,UACE,yCACA,uCACE,mDACA,wDACA,+FAGJ,sBAAKA,UAAU,eAAf,UACE,2CACA,uCACE,mGACA,uFAGJ,sBAAKA,UAAU,eAAf,UACE,uCACA,qCACE,sHAIN,eAACU,EAAA,EAAD,CAAKV,UAAU,gBAAf,UACE,sBAAKA,UAAU,eAAf,UACE,6CACA,uCACE,2EACA,iDAGJ,sBAAKA,UAAU,eAAf,UACE,wCACA,uCACE,0HACA,mGACA,oFACA,0J,wBCjCDW,MAlCf,WAAyB,IARNC,EAQK,EACUC,qBATfD,EASkCA,GAPvCE,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAElB,GAAKiB,EAAEjB,MAEzBc,EAAYK,QAAO,SAACC,EAAMC,EAAKC,GAAZ,OAAuBA,EAAQ,IAAM,EAAIF,EAAKG,KAAK,CAACF,IAAQD,EAAKA,EAAKI,OAAS,GAAGD,KAAKF,KAASD,IAAM,MAI9G,mBACjBK,EADiB,KAGtB,OAHsB,KAIpB,cAAChB,EAAA,EAAD,CAAWT,GAAG,UAAUE,UAAU,OAAlC,SAEIuB,EAAUC,KAAI,SAACC,EAAOC,GACpB,OACA,cAACjB,EAAA,EAAD,CAAKT,UAAU,OAAf,SAEIyB,EAAMD,KAAI,SAACG,EAAMC,GACf,OACE,cAAClB,EAAA,EAAD,CAAKV,UAAU,gCAAf,SACE,eAAC6B,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,SAAtB,UACE,cAACF,EAAA,EAAKG,IAAN,CAAUF,MAAO,CAAEG,OAAQ,SAAWC,QAAQ,MAAMC,IAAMR,EAAKS,YAC/D,eAACP,EAAA,EAAKQ,KAAN,WACE,cAACR,EAAA,EAAKS,MAAN,UAAcX,EAAKY,QACnB,cAACV,EAAA,EAAKW,KAAN,UACIb,EAAKc,iBANsCd,EAAK7B,e,MCL7D4C,MAXf,WACE,OACE,sBAAK1C,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,QCFc2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCjBnC,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,QCEdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SFgHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBb,MAAK,SAACc,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,YE3G5BtB,M","file":"static/js/main.eefca11c.chunk.js","sourcesContent":["import { Navbar, Nav } from 'react-bootstrap';\r\nimport { HashLink as Link } from 'react-router-hash-link'\r\n\r\nfunction Navigation() {\r\n  return (\r\n    <Navbar bg=\"light\" expand=\"lg\" fixed=\"top\">\r\n      <Navbar.Brand href=\"#\">Jehko's Portfolio</Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n      <Navbar.Collapse id=\"basic-navbar-nav\">\r\n        <Nav className=\"mr-auto\">\r\n          <Nav.Link as={Link} to=\"#profile\">Profile</Nav.Link>\r\n          <Nav.Link as={Link} to=\"#project\">Project</Nav.Link>\r\n        </Nav>\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  )\r\n}\r\n\r\nexport default Navigation;","import { Jumbotron } from 'react-bootstrap';\r\n\r\nfunction Summary() {\r\n  return (\r\n    <Jumbotron className=\"background mb-0 rounded-0\">\r\n      <div id=\"summary\" className=\"summary position-relative\">\r\n        <h1>개발자 Jehko입니다.</h1>\r\n      </div>\r\n    </Jumbotron>\r\n  )\r\n}\r\n\r\nexport default Summary;\r\n","import { Jumbotron, Container, Row, Col } from 'react-bootstrap';\r\n\r\nfunction Profile () {\r\n  return (\r\n    <Jumbotron id=\"profile\" className=\"profile\">\r\n      <Container fluid className=\"postion-absolute\">\r\n        <Row>\r\n          <Col className=\"profile-left\">\r\n            <div className=\"profile-item\">\r\n              <h2>PROFILE</h2>\r\n              <blockquote>\r\n                안녕하세요. 개발자 고정훈입니다.<br/>\r\n                학부때 프로젝트를 진행하며 개발에 대한 매력을 느꼈습니다.<br/>\r\n                2013년 첫 회사에 입사하여 실무를 시작했고, 끊임없이 '재미있는 것'을\r\n                찾고있습니다.<br/>\r\n                최근에는 React, JPA에 관심이 생겨 공부하고 있습니다.                \r\n              </blockquote>\r\n            </div>\r\n            <div className=\"profile-item\">\r\n              <h2>SKILLS</h2>\r\n              <blockquote>\r\n                <span className=\"word-token\">JAVA</span>\r\n                <span className=\"word-token\">SPRING</span>\r\n                <span className=\"word-token\">Javascript</span>\r\n                <span className=\"word-token\">React</span>\r\n                <span className=\"word-token\">Oracle</span>\r\n                <span className=\"word-token\">Postgresql</span>\r\n              </blockquote>\r\n            </div>\r\n            <div className=\"profile-item\">\r\n              <h2>TOOLS</h2>\r\n              <blockquote>\r\n                <span className=\"word-token\">Eclipse</span>\r\n                <span className=\"word-token\">VS Code</span>\r\n                <span className=\"word-token\">Toad</span>\r\n                <span className=\"word-token\">pgAdmin</span>\r\n                <span className=\"word-token\">SLACK</span>\r\n                <span className=\"word-token\">GIT</span>\r\n                <span className=\"word-token\">SVN</span>\r\n              </blockquote>\r\n            </div>\r\n          </Col>\r\n          <Col className=\"profile-center\">\r\n            <div className=\"profile-item\">\r\n              <h2>CONTACT</h2>\r\n              <blockquote>\r\n                <p>Tel. 010-2944-1219</p>\r\n                <p>Email jehko08@naver.com</p>\r\n                <p>서울시 구로구 구일로</p>\r\n              </blockquote>\r\n            </div>\r\n            <div className=\"profile-item\">\r\n              <h2>EDUCATION</h2>\r\n              <blockquote>\r\n                <p>2008 서울대진고등학교 졸업</p>\r\n                <p>2012 한성대학교 졸업</p>\r\n              </blockquote>\r\n            </div>\r\n            <div className=\"profile-item\">\r\n              <h2>PRIZE</h2>\r\n              <blockquote>\r\n                <p>2012 제6회 공개SW 개발자대회 동상</p>\r\n              </blockquote>\r\n            </div>\r\n          </Col>\r\n          <Col className=\"profile-right\">\r\n            <div className=\"profile-item\">\r\n              <h2>CERTIFICATE</h2>\r\n              <blockquote>\r\n                <p>정보처리기사(2012)</p>\r\n                <p>SQLD(2021)</p>\r\n              </blockquote>\r\n            </div>\r\n            <div className=\"profile-item\">\r\n              <h2>CAREER</h2>\r\n              <blockquote>\r\n                <p>2018 - 현재 기가지니 웹앱 서비스 개발</p>\r\n                <p>2017-2018 빅데이터 솔루션 개발</p>\r\n                <p>2017-2018 SNS 웹크롤러 개발</p>\r\n                <p>2013-2016 한국도로공사 내부 시스템 다수 개발</p>\r\n              </blockquote>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </Jumbotron>\r\n  )\r\n}\r\n\r\nexport default Profile;","import React, { useState } from 'react';\r\nimport { Card, Container, Row, Col } from 'react-bootstrap';\r\nimport projectData from '../ProjectData.json';\r\n\r\nfunction makeArray(projectData) {\r\n  let rowArray = [];\r\n  projectData.sort((a, b) => b.id - a.id);\r\n\r\n  rowArray = projectData.reduce((rows, key, index) => (index % 3 === 0 ? rows.push([key]) : rows[rows.length - 1].push(key)) && rows, []);\r\n  return rowArray;\r\n}\r\n\r\nfunction ProjectCard () {\r\n  let [dataState, setDataState] = useState(makeArray(projectData));\r\n\r\n  return (\r\n    <Container id=\"project\" className=\"pt-3\">\r\n      {\r\n        dataState.map((rData, rIdx) => {\r\n          return (\r\n          <Row className=\"mb-5\">\r\n            {\r\n              rData.map((data, i) => {\r\n                return (\r\n                  <Col className=\"d-flex justify-content-center\" key={ data.id }>\r\n                    <Card style={{ width: '18rem' }}>\r\n                      <Card.Img style={{ height: '10rem' }} variant=\"top\" src={ data.thumbnail } />\r\n                      <Card.Body>\r\n                        <Card.Title>{ data.title }</Card.Title>\r\n                        <Card.Text>\r\n                          { data.summary }\r\n                        </Card.Text>\r\n                      </Card.Body>\r\n                    </Card>\r\n                  </Col>\r\n                )\r\n              })\r\n            }\r\n          </Row>\r\n          )\r\n        })\r\n      }\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default ProjectCard;","import React from 'react';\nimport Navigation from './Components/Navigation'\nimport Summary from './Components/Summary'\nimport Profile from './Components/Profile'\nimport ProjectCard from './Components/ProjectCard'\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navigation></Navigation>\n      <Summary></Summary>\n      <Profile></Profile>\n      <ProjectCard></ProjectCard>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}