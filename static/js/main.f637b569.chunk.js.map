{"version":3,"sources":["Components/Navigation.js","Components/Summary.js","Components/Profile.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Navigation","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","Summary","Jumbotron","Profile","Container","fluid","Row","Col","App","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6OAiBeA,MAff,WACE,OACE,eAACC,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,KAA1B,UACE,cAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,QAAnB,+BACA,cAACJ,EAAA,EAAOK,OAAR,CAAeC,gBAAc,qBAC7B,cAACN,EAAA,EAAOO,SAAR,CAAiBC,GAAG,mBAApB,SACE,eAACC,EAAA,EAAD,CAAKC,UAAU,UAAf,UACE,cAACD,EAAA,EAAIE,KAAL,mBACA,cAACF,EAAA,EAAIE,KAAL,+B,QCEKC,MAVf,WACE,OACE,cAACC,EAAA,EAAD,CAAWH,UAAU,4BAArB,SACE,qBAAKA,UAAU,4BAAf,SACE,kF,wBCoDOI,MAxDf,WACE,OACE,cAACD,EAAA,EAAD,CAAWL,GAAG,UAAUE,UAAU,UAAlC,SACE,cAACK,EAAA,EAAD,CAAWC,OAAK,EAACN,UAAU,mBAA3B,SACE,eAACO,EAAA,EAAD,CAAKP,UAAU,GAAf,UACE,cAACQ,EAAA,EAAD,CAAKR,UAAU,eAAf,SACE,sBAAKA,UAAU,eAAf,UACE,yCACA,yHACA,yHACA,yHACA,yHACA,yHACA,yHACA,yHACA,8HAIJ,eAACQ,EAAA,EAAD,CAAKR,UAAU,iBAAf,UACE,sBAAKA,UAAU,eAAf,UACE,yCACA,mDACA,wDACA,4FAEF,sBAAKA,UAAU,eAAf,UACE,2CACA,mGACA,oFAEF,sBAAKA,UAAU,eAAf,UACE,wCACA,oHAGJ,eAACQ,EAAA,EAAD,CAAKR,UAAU,gBAAf,UACE,sBAAKA,UAAU,eAAf,UACE,6CACA,2EACA,8CAEF,sBAAKA,UAAU,eAAf,UACE,yCACA,0HACA,mGACA,oFACA,uJ,MC9BCS,MAVf,WACE,OACE,sBAAKT,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,QCFcU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCjBnC,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SFoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBb,MAAK,SAACc,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,YE/G5BtB,M","file":"static/js/main.f637b569.chunk.js","sourcesContent":["import { Navbar, Nav, NavDropdown } from 'react-bootstrap';\r\n\r\nfunction Navigation() {\r\n  return (\r\n    <Navbar bg=\"light\" expand=\"lg\">\r\n      <Navbar.Brand href=\"#home\">Jehko's Portfolio</Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n      <Navbar.Collapse id=\"basic-navbar-nav\">\r\n        <Nav className=\"mr-auto\">\r\n          <Nav.Link>Home</Nav.Link>\r\n          <Nav.Link>Profile</Nav.Link>\r\n        </Nav>\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  )\r\n}\r\n\r\nexport default Navigation;","import { Jumbotron } from 'react-bootstrap';\r\n\r\nfunction Summary() {\r\n  return (\r\n    <Jumbotron className=\"background mb-0 rounded-0\">\r\n      <div className=\"summary position-relative\">\r\n        <h1>개발자 Jehko입니다.</h1>\r\n      </div>\r\n    </Jumbotron>\r\n  )\r\n}\r\n\r\nexport default Summary;\r\n","import { Jumbotron, Container, Row, Col } from 'react-bootstrap';\r\n\r\nfunction Profile () {\r\n  return (\r\n    <Jumbotron id=\"profile\" className=\"profile\">\r\n      <Container fluid className=\"postion-absolute\">\r\n        <Row className=\"\">\r\n          <Col className=\"profile-left\">\r\n            <div className=\"profile-item\">\r\n              <h2>PROFILE</h2>\r\n              <p>안녕하세요. 개발자 고정훈입니다.</p>\r\n              <p>안녕하세요. 개발자 고정훈입니다.</p>\r\n              <p>안녕하세요. 개발자 고정훈입니다.</p>\r\n              <p>안녕하세요. 개발자 고정훈입니다.</p>\r\n              <p>안녕하세요. 개발자 고정훈입니다.</p>\r\n              <p>안녕하세요. 개발자 고정훈입니다.</p>\r\n              <p>안녕하세요. 개발자 고정훈입니다.</p>\r\n              <p>안녕하세요. 개발자 고정훈입니다.</p>\r\n            </div>\r\n\r\n          </Col>\r\n          <Col className=\"profile-center\">\r\n            <div className=\"profile-item\">\r\n              <h2>CONTACT</h2>\r\n              <p>Tel. 010-2944-1219</p>\r\n              <p>Email jehko08@naver.com</p>\r\n              <p>서울시 구로구 구일로</p>\r\n            </div>\r\n            <div className=\"profile-item\">\r\n              <h2>EDUCATION</h2>\r\n              <p>2008 서울대진고등학교 졸업</p>\r\n              <p>2012 한성대학교 졸업</p>\r\n            </div>\r\n            <div className=\"profile-item\">\r\n              <h2>AWARDS</h2>\r\n              <p>2012 제6회 공개SW 개발자대회 동상</p>\r\n            </div>\r\n          </Col>\r\n          <Col className=\"profile-right\">\r\n            <div className=\"profile-item\">\r\n              <h2>CERTIFICATE</h2>\r\n              <p>정보처리기사(2012)</p>\r\n              <p>SQLD(2021)</p>\r\n            </div>\r\n            <div className=\"profile-item\">\r\n              <h2>PROJECT</h2>\r\n              <p>2018 - 현재 기가지니 웹앱 서비스 개발</p>\r\n              <p>2017-2018 빅데이터 솔루션 개발</p>\r\n              <p>2017-2018 SNS 웹크롤러 개발</p>\r\n              <p>2013-2016 한국도로공사 내부 시스템 다수 개발</p>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </Jumbotron>\r\n  )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\nimport { Link, Route, Switch, useHistory } from 'react-router-dom';\n\nimport Navigation from './Components/Navigation'\nimport Summary from './Components/Summary'\nimport Profile from './Components/Profile'\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navigation></Navigation>\n      <Summary></Summary>\n      <Profile></Profile>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}